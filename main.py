import pandas as pd
from web3 import Web3
from function_bridge_usdc_to_arb import swap_max_usdc_fantom_to_arbitrum
from function_bridge_usdc_to_opt import swap_max_usdc_fantom_to_optimism
from buy_ftm_by_eth import swap_eth_base_to_fantom  # –ò–º–ø–æ—Ä—Ç –¥–ª—è –ø–µ—Ä–µ–≤–æ–¥–∞ ETH –≤ FTM

# –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å —Å–µ—Ç—å—é Fantom
web3 = Web3(Web3.HTTPProvider('https://fantom-rpc.publicnode.com'))
if not web3.is_connected():
    raise Exception('‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ Fantom RPC')

# –ê–¥—Ä–µ—Å –∫–æ–Ω—Ç—Ä–∞–∫—Ç–∞ lzUSDC
lz_usdc_address = '0x28a92dde19D9989F39A49905d7C9C2FAc7799bDf'

# ABI –∫–æ–Ω—Ç—Ä–∞–∫—Ç–∞ lzUSDC
lz_usdc_abi = [
    {
        "constant": True,
        "inputs": [{"name": "account", "type": "address"}],
        "name": "balanceOf",
        "outputs": [{"name": "", "type": "uint256"}],
        "payable": False,
        "stateMutability": "view",
        "type": "function"
    }
]

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –±–∞–ª–∞–Ω—Å–∞ lzUSDC
def check_balance_lz_usdc(private_key):
    account_address = web3.eth.account.from_key(private_key).address
    contract = web3.eth.contract(address=lz_usdc_address, abi=lz_usdc_abi)
    balance = contract.functions.balanceOf(account_address).call()
    return balance

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –±–∞–ª–∞–Ω—Å–∞ FTM
def check_balance_ftm(private_key):
    account_address = web3.eth.account.from_key(private_key).address
    balance_wei = web3.eth.get_balance(account_address)
    balance_ftm = web3.from_wei(balance_wei, 'ether')  # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º wei –≤ FTM
    return balance_ftm

def process_wallets(excel_file='wallets.xlsx'):
    # –ß—Ç–µ–Ω–∏–µ Excel-—Ñ–∞–π–ª–∞
    try:
        df = pd.read_excel(excel_file)
        print(f" –£—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω —Ñ–∞–π–ª {excel_file}")
    except Exception as e:
        print(f" –û—à–∏–±–∫–∞ –ø—Ä–∏ —á—Ç–µ–Ω–∏–∏ —Ñ–∞–π–ª–∞ {excel_file}: {str(e)}")
        return

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã —Ñ–∞–π–ª–∞
    required_columns = ['PrivateKey', 'Amount', 'Arb', 'Optimism']
    if not all(col in df.columns for col in required_columns):
        print(f"‚ùå –í —Ñ–∞–π–ª–µ {excel_file} –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ —Å—Ç–æ–ª–±—Ü—ã: {required_columns}")
        return

    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–∞–∂–¥–æ–≥–æ –∫–æ—à–µ–ª—å–∫–∞
    for index, row in df.iterrows():
        private_key = str(row['PrivateKey']).strip().replace("0x", "")  # –£–±–∏—Ä–∞–µ–º –ø—Ä–µ—Ñ–∏–∫—Å 0x
        amount_eth = float(row['Amount'])  # –°—É–º–º–∞ –≤ ETH
        arb = int(row['Arb'])
        optimism = int(row['Optimism'])

        print(f"\n=== –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ—à–µ–ª—å–∫–∞ {index + 1} ===")
        print(f"–ü—Ä–∏–≤–∞—Ç–Ω—ã–π –∫–ª—é—á: {private_key[:6]}...{private_key[-6:]}")
        print(f"–°—É–º–º–∞ ETH: {amount_eth}")
        print(f"Arb: {arb}, Optimism: {optimism}")

        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤–∞–ª–∏–¥–Ω–æ—Å—Ç–∏ –ø—Ä–∏–≤–∞—Ç–Ω–æ–≥–æ –∫–ª—é—á–∞
        if not (len(private_key) == 64 and all(c in '0123456789abcdef' for c in private_key)):
            print(f"‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –ø—Ä–∏–≤–∞—Ç–Ω–æ–≥–æ –∫–ª—é—á–∞: –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å 64-—Å–∏–º–≤–æ–ª—å–Ω–æ–π —à–µ—Å—Ç–Ω–∞–¥—Ü–∞—Ç–µ—Ä–∏—á–Ω–æ–π —Å—Ç—Ä–æ–∫–æ–π")
            continue

        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –±–∞–ª–∞–Ω—Å–∞ lzUSDC
        balance_lz_usdc = check_balance_lz_usdc(private_key)
        if balance_lz_usdc == 0:
            print(f"‚ùå –ù–∞ –∫–æ—à–µ–ª—å–∫–µ {private_key[:6]}...{private_key[-6:]} –Ω–µ—Ç lzUSDC (–±–∞–ª–∞–Ω—Å 0), –ø—Ä–æ–ø—É—Å–∫–∞–µ–º –µ–≥–æ.")
            continue
        print(f"üí∞ –ë–∞–ª–∞–Ω—Å lzUSDC: {balance_lz_usdc / 10**6:.2f} USDC")

        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –±–∞–ª–∞–Ω—Å–∞ FTM
        balance_ftm = check_balance_ftm(private_key)
        print(f"üí∞ –ë–∞–ª–∞–Ω—Å FTM: {balance_ftm:.6f} FTM")

        # –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Å–µ—Ç–∏
        if arb == 1 and optimism == 0:
            network = 'arb'
        elif arb == 0 and optimism == 1:
            network = 'opt'
        else:
            print(f"‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –≤—ã–±–æ—Ä —Å–µ—Ç–∏: Arb={arb}, Optimism={optimism}. –î–æ–ª–∂–Ω–æ –±—ã—Ç—å —Ç–æ–ª—å–∫–æ –æ–¥–Ω–æ –∑–Ω–∞—á–µ–Ω–∏–µ 1")
            continue

        # –®–∞–≥ 1: –ü–µ—Ä–µ–≤–æ–¥ ETH —Å Base –Ω–∞ Fantom (–ø–æ–ª—É—á–µ–Ω–∏–µ FTM), –µ—Å–ª–∏ –±–∞–ª–∞–Ω—Å FTM < 2
        if balance_ftm < 2:
            print(f"‚ÑπÔ∏è –ë–∞–ª–∞–Ω—Å FTM –º–µ–Ω—å—à–µ 2 ({balance_ftm:.6f} FTM), –≤—ã–ø–æ–ª–Ω—è–µ–º –ø–µ—Ä–µ–≤–æ–¥ ETH —Å Base –Ω–∞ Fantom...")
            try:
                buy_ftm_tx = swap_eth_base_to_fantom(private_key, amount_eth)
                if buy_ftm_tx:
                    print(f"‚úÖ –ü–µ—Ä–µ–≤–æ–¥ ETH —Å Base –Ω–∞ Fantom –≤—ã–ø–æ–ª–Ω–µ–Ω: {buy_ftm_tx.hex()}")
                else:
                    print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–µ—Ä–µ–≤–æ–¥–µ ETH —Å Base –Ω–∞ Fantom")
                    continue
            except Exception as e:
                print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–µ—Ä–µ–≤–æ–¥–µ ETH —Å Base –Ω–∞ Fantom: {str(e)}")
                continue
        else:
            print(f"‚ÑπÔ∏è –ë–∞–ª–∞–Ω—Å FTM –¥–æ—Å—Ç–∞—Ç–æ—á–µ–Ω ({balance_ftm:.6f} FTM >= 2 FTM), –ø—Ä–æ–ø—É—Å–∫–∞–µ–º –ø–µ—Ä–µ–≤–æ–¥ ETH")

        # –®–∞–≥ 2: –°–≤–∞–ø –≤ –≤—ã–±—Ä–∞–Ω–Ω—É—é —Å–µ—Ç—å (Arbitrum –∏–ª–∏ Optimism)
        try:
            if network == 'arb':
                swap_tx = swap_max_usdc_fantom_to_arbitrum(private_key)
            elif network == 'opt':
                swap_tx = swap_max_usdc_fantom_to_optimism(private_key)

            if swap_tx:
                print(f"‚úÖ –°–≤–∞–ø –≤ {network} –≤—ã–ø–æ–ª–Ω–µ–Ω: {swap_tx.hex()}")
            else:
                print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–≤–∞–ø–µ –≤ {network}")
                continue
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–≤–∞–ø–µ –≤ {network}: {str(e)}")
            continue

    print("\n=== –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—Å–µ—Ö –∫–æ—à–µ–ª—å–∫–æ–≤ –∑–∞–≤–µ—Ä—à–µ–Ω–∞ ===")

if __name__ == "__main__":
    process_wallets('wallets.xlsx')
