import json
import time
from web3 import Web3
from eth_account import Account
from web3.exceptions import ContractLogicError

# –ö–æ–Ω—Å—Ç–∞–Ω—Ç—ã
SLIPPAGE = 30  # –û—Å—Ç–∞–≤–ª—è–µ–º –∫–∞–∫ –≤ –∏—Å—Ö–æ–¥–Ω–æ–º –∫–æ–¥–µ (3%)
FANTOM_RPC_URL = 'https://fantom-rpc.publicnode.com'
STARGATE_FANTOM_ADDRESS = Web3.to_checksum_address('0x45A01E4e04F14f7A4a6702c74187c5F6222033cd')  # Stargate Router –Ω–∞ Fantom
USDC_FANTOM_ADDRESS = Web3.to_checksum_address('0x28a92dde19D9989F39A49905d7C9C2FAc7799bDf')  # lzUSDC –Ω–∞ Fantom

FANTOM_LZ_CHAIN_ID = 112  # Stargate ID –¥–ª—è Fantom
OPTIMISM_LZ_CHAIN_ID = 111  # Stargate ID –¥–ª—è Optimism
SRC_POOL_ID = 1  # USDC –Ω–∞ Fantom (–∫–∞–∫ –≤ –≤–∞—à–µ–º –ø—Ä–æ–±–Ω–æ–º –∫–æ–¥–µ)
DST_POOL_ID = 21  # USDC.e –Ω–∞ Optimism (–∫–∞–∫ –≤ –≤–∞—à–µ–º –ø—Ä–æ–±–Ω–æ–º –∫–æ–¥–µ)

fantom_w3 = Web3(Web3.HTTPProvider(FANTOM_RPC_URL))
if not fantom_w3.is_connected():
    raise Exception('‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ Fantom RPC')

# ABI –¥–ª—è Stargate –∏ ERC20 (–ø—Ä–µ–¥–ø–æ–ª–∞–≥–∞–µ—Ç—Å—è, —á—Ç–æ –æ–Ω–∏ —É –≤–∞—Å –µ—Å—Ç—å –≤ —Ñ–∞–π–ª–∞—Ö)
stargate_abi = json.load(open('bridge_abi.json'))  # –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ —Ñ–∞–π–ª —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
usdc_abi = json.load(open('erc20_abi.json'))  # –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ —Ñ–∞–π–ª —Å—É—â–µ—Å—Ç–≤—É–µ—Ç

stargate_fantom_contract = fantom_w3.eth.contract(address=STARGATE_FANTOM_ADDRESS, abi=stargate_abi)
usdc_fantom_contract = fantom_w3.eth.contract(address=USDC_FANTOM_ADDRESS, abi=usdc_abi)

def swap_max_usdc_fantom_to_optimism(private_key):
    ACCOUNT = Account.from_key(private_key)
    WALLET_ADDRESS = ACCOUNT.address

    def get_balance_usdc_fantom(address):
        balance = usdc_fantom_contract.functions.balanceOf(address).call()
        print(f"üí∞ –ë–∞–ª–∞–Ω—Å lzUSDC –Ω–∞ Fantom: {balance / 10**6:.2f} USDC")
        return balance

    def check_transaction_status(tx_hash):
        try:
            receipt = fantom_w3.eth.wait_for_transaction_receipt(tx_hash, timeout=300)  # –£–≤–µ–ª–∏—á–µ–Ω–Ω—ã–π —Ç–∞–π–º–∞—É—Ç
            if receipt and receipt.get('status') == 1:
                print(f"‚úÖ –¢—Ä–∞–Ω–∑–∞–∫—Ü–∏—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∞: https://ftmscan.com/tx/{tx_hash.hex()}")
                return True
            else:
                print(f"‚ùå –¢—Ä–∞–Ω–∑–∞–∫—Ü–∏—è –ø—Ä–æ–≤–∞–ª–∏–ª–∞—Å—å: https://ftmscan.com/tx/{tx_hash.hex()}")
                if receipt:
                    print(f"Gas Used: {receipt.get('gasUsed', 'N/A')} –∏–∑ {receipt.get('gasLimit', 'N/A')}")
                    tx = fantom_w3.eth.get_transaction(tx_hash)
                    try:
                        fantom_w3.eth.call(tx, block_identifier=receipt.get('blockNumber'))
                    except ContractLogicError as e:
                        print(f"–ü—Ä–∏—á–∏–Ω–∞ –æ—à–∏–±–∫–∏: {str(e)}")
                return False
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏: {str(e)}")
            return False

    def swap_usdc_fantom_to_optimism_usdc(account, amount):
        address = Web3.to_checksum_address(account.address)
        nonce = fantom_w3.eth.get_transaction_count(address)
        gas_price = fantom_w3.eth.gas_price

        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –±–∞–ª–∞–Ω—Å–∞ FTM —Å –æ–∂–∏–¥–∞–Ω–∏–µ–º
        max_attempts = 10
        for attempt in range(max_attempts):
            ftm_balance = fantom_w3.eth.get_balance(address)
            print(f"üí∞ –ë–∞–ª–∞–Ω—Å FTM (–ø–æ–ø—ã—Ç–∫–∞ {attempt + 1}/{max_attempts}): {ftm_balance / 10**18:.6f} FTM")
            if ftm_balance > 0:
                break
            if attempt < max_attempts - 1:
                print("–û–∂–∏–¥–∞–µ–º –∑–∞—á–∏—Å–ª–µ–Ω–∏—è FTM... (10 —Å–µ–∫—É–Ω–¥)")
                time.sleep(10)
        if ftm_balance == 0:
            print("‚ùå –ë–∞–ª–∞–Ω—Å FTM —Ä–∞–≤–µ–Ω 0 –ø–æ—Å–ª–µ –≤—Å–µ—Ö –ø–æ–ø—ã—Ç–æ–∫. –ü–æ–ø–æ–ª–Ω–∏—Ç–µ –∫–æ—à–µ–ª–µ–∫ –¥–ª—è –æ–ø–ª–∞—Ç—ã –≥–∞–∑–∞ –∏ –∫–æ–º–∏—Å—Å–∏–∏ Stargate.")
            return None

        # –û—Ü–µ–Ω–∫–∞ –∫–æ–º–∏—Å—Å–∏–∏ LayerZero
        fees = stargate_fantom_contract.functions.quoteLayerZeroFee(
            OPTIMISM_LZ_CHAIN_ID,
            1,  # functionType –¥–ª—è swap
            "0x0000000000000000000000000000000000000001",  # Placeholder –∫–∞–∫ –≤ –∏—Å—Ö–æ–¥–Ω–∏–∫–µ
            "0x",  # –ü—É—Å—Ç–æ–π payload
            [0, 0, "0x0000000000000000000000000000000000000001"]  # –ü–∞—Ä–∞–º–µ—Ç—Ä—ã LayerZero
        ).call()
        fee = fees[0]
        print(f"üí∏ –ö–æ–º–∏—Å—Å–∏—è Stargate (wei): {fee} ({fee / 10**18:.6f} FTM)")

        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ approve
        approve_gas = 0
        allowance = usdc_fantom_contract.functions.allowance(address, STARGATE_FANTOM_ADDRESS).call()
        print(f"–¢–µ–∫—É—â–µ–µ —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–µ: {allowance / 10**6:.2f} lzUSDC")
        if allowance < amount:
            approve_txn = usdc_fantom_contract.functions.approve(STARGATE_FANTOM_ADDRESS, amount).build_transaction({
                'from': address,
                'gasPrice': gas_price,
                'nonce': nonce,
            })
            try:
                approve_gas = int(fantom_w3.eth.estimate_gas(approve_txn) * 1.2)
                approve_txn['gas'] = approve_gas
            except Exception as e:
                print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ü–µ–Ω–∫–µ –≥–∞–∑–∞ –¥–ª—è approve: {str(e)}")
                return None

            required_ftm_for_approve = gas_price * approve_gas
            if ftm_balance < required_ftm_for_approve:
                print(f"‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ FTM –¥–ª—è approve: –Ω—É–∂–Ω–æ {required_ftm_for_approve / 10**18:.6f} FTM, –µ—Å—Ç—å {ftm_balance / 10**18:.6f} FTM")
                return None

            signed_approve_txn = fantom_w3.eth.account.sign_transaction(approve_txn, account.key)
            try:
                approve_txn_hash = fantom_w3.eth.send_raw_transaction(signed_approve_txn.raw_transaction)
                print(f"FANTOM | lzUSDC APPROVED | https://ftmscan.com/tx/{approve_txn_hash.hex()}")
                if not check_transaction_status(approve_txn_hash):
                    print("‚ùå Approve –ø—Ä–æ–≤–∞–ª–∏–ª—Å—è, –ø—Ä–µ—Ä—ã–≤–∞–µ–º")
                    return None
            except Exception as e:
                print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ approve: {str(e)}")
                return None
            nonce += 1
            time.sleep(10)

        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –±–∞–ª–∞–Ω—Å–∞ –ø–µ—Ä–µ–¥ swap
        balance_before_swap = usdc_fantom_contract.functions.balanceOf(address).call()
        if balance_before_swap < amount:
            print(f"‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ lzUSDC: –Ω—É–∂–Ω–æ {amount / 10**6:.2f}, –µ—Å—Ç—å {balance_before_swap / 10**6:.2f}")
            return None

        # –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ swap
        swap_txn = stargate_fantom_contract.functions.swap(
            OPTIMISM_LZ_CHAIN_ID,
            SRC_POOL_ID,
            DST_POOL_ID,
            address,  # refundAddress
            amount,
            amount - (amount * SLIPPAGE) // 1000,  # minAmount —Å —É—á–µ—Ç–æ–º slippage
            [0, 0, '0x0000000000000000000000000000000000000001'],  # lzTxParams
            address,  # toAddress
            '0x'  # payload
        ).build_transaction({
            'from': address,
            'value': fee,
            'gasPrice': gas_price,
            'nonce': nonce,
        })
        try:
            swap_gas = int(fantom_w3.eth.estimate_gas(swap_txn) * 1.2)
            swap_txn['gas'] = swap_gas
            print(f"–û—Ü–µ–Ω–∫–∞ –≥–∞–∑–∞ –¥–ª—è —Å–≤–∞–ø–∞: {swap_txn['gas']}")
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ü–µ–Ω–∫–µ –≥–∞–∑–∞ –¥–ª—è —Å–≤–∞–ø–∞: {str(e)}")
            swap_txn['gas'] = 1000000  # –ó–∞–ø–∞—Å–Ω–æ–π –≥–∞–∑
            print("–ò—Å–ø–æ–ª—å–∑—É–µ–º –∑–∞–ø–∞—Å–Ω–æ–π –≥–∞–∑: 1,000,000")

        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ—Å—Ç–∏ FTM
        ftm_balance = fantom_w3.eth.get_balance(address)  # –û–±–Ω–æ–≤–ª—è–µ–º –±–∞–ª–∞–Ω—Å –ø–æ—Å–ª–µ approve
        required_ftm = fee + gas_price * (approve_gas + swap_gas if approve_gas else swap_gas)
        if ftm_balance < required_ftm:
            print(f"‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ FTM: –Ω—É–∂–Ω–æ {required_ftm / 10**18:.6f} FTM, –µ—Å—Ç—å {ftm_balance / 10**18:.6f} FTM")
            return None

        # –û—Ç–ø—Ä–∞–≤–∫–∞ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ swap
        signed_swap_txn = fantom_w3.eth.account.sign_transaction(swap_txn, account.key)
        try:
            swap_txn_hash = fantom_w3.eth.send_raw_transaction(signed_swap_txn.raw_transaction)
            print(f"üöÄ –°–≤–∞–ø –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω: https://ftmscan.com/tx/{swap_txn_hash.hex()}")
            print(f"–°—Ç–∞—Ç—É—Å: https://layerzeroscan.com/tx/{swap_txn_hash.hex()}")
            return swap_txn_hash
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–≤–∞–ø–∞: {str(e)}")
            return None

    print(f"\n‚ñ∂Ô∏è –ê–¥—Ä–µ—Å –∫–æ—à–µ–ª—å–∫–∞: {WALLET_ADDRESS}")
    balance = get_balance_usdc_fantom(WALLET_ADDRESS)
    if balance == 0:
        print("‚ùå –ë–∞–ª–∞–Ω—Å lzUSDC —Ä–∞–≤–µ–Ω –Ω—É–ª—é")
        return None

    amount_usdc = balance
    print(f"–ë—É–¥–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ: {amount_usdc / 10**6:.2f} lzUSDC")
    print("–ù–∞—á–∏–Ω–∞–µ–º —Å–≤–∞–ø lzUSDC (Fantom) -> USDC.e (Optimism)...")
    tx_hash = swap_usdc_fantom_to_optimism_usdc(ACCOUNT, amount_usdc)
    if tx_hash:
        print("–û–∂–∏–¥–∞–µ–º –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è...")
        time.sleep(20)
        check_transaction_status(tx_hash)
        return tx_hash
    return None

if __name__ == "__main__":
    PRIVATE_KEY = ''  # –ó–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ –≤–∞—à –ø—Ä–∏–≤–∞—Ç–Ω—ã–π –∫–ª—é—á
    tx_hash = swap_max_usdc_fantom_to_optimism(PRIVATE_KEY)
    if tx_hash:
        print(f"–¢—Ä–∞–Ω–∑–∞–∫—Ü–∏—è —É—Å–ø–µ—à–Ω–æ –≤—ã–ø–æ–ª–Ω–µ–Ω–∞: {tx_hash.hex()}")