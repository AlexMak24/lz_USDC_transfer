import json
import time
from web3 import Web3
from eth_account import Account
from web3.exceptions import ContractLogicError

# –ö–æ–Ω—Å—Ç–∞–Ω—Ç—ã
SLIPPAGE = 30
FANTOM_RPC_URL = 'https://fantom-rpc.publicnode.com'
STARGATE_FANTOM_ADDRESS = Web3.to_checksum_address('0xAf5191B0De278C7286d6C7CC6ab6BB8A73bA2Cd6')
USDC_FANTOM_ADDRESS = Web3.to_checksum_address('0x28a92dde19D9989F39A49905d7C9C2FAc7799bDf')

FANTOM_LZ_CHAIN_ID = 112
ARBITRUM_LZ_CHAIN_ID = 110
SRC_POOL_ID = 21
DST_POOL_ID = 2

fantom_w3 = Web3(Web3.HTTPProvider(FANTOM_RPC_URL))
if not fantom_w3.is_connected():
    raise Exception('‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ Fantom RPC')

stargate_abi = json.load(open('bridge_abi.json'))
usdc_abi = json.load(open('erc20_abi.json'))

stargate_fantom_contract = fantom_w3.eth.contract(address=STARGATE_FANTOM_ADDRESS, abi=stargate_abi)
usdc_fantom_contract = fantom_w3.eth.contract(address=USDC_FANTOM_ADDRESS, abi=usdc_abi)


def get_balance_usdc_fantom(address):
    balance = usdc_fantom_contract.functions.balanceOf(address).call()
    print(f"üí∞ –ë–∞–ª–∞–Ω—Å lzUSDC –Ω–∞ Fantom: {balance / 10**6:.2f} USDC")
    return balance


def check_transaction_status(tx_hash):
    try:
        receipt = fantom_w3.eth.wait_for_transaction_receipt(tx_hash, timeout=120)
        if receipt and receipt.get('status') == 1:
            print(f"‚úÖ –¢—Ä–∞–Ω–∑–∞–∫—Ü–∏—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∞: https://ftmscan.com/tx/{tx_hash.hex()}")
            return True
        else:
            print(f"‚ùå –¢—Ä–∞–Ω–∑–∞–∫—Ü–∏—è –ø—Ä–æ–≤–∞–ª–∏–ª–∞—Å—å: https://ftmscan.com/tx/{tx_hash.hex()}")
            if receipt:
                print(f"Gas Used: {receipt.get('gasUsed', 'N/A')}")
                tx = fantom_w3.eth.get_transaction(tx_hash)
                try:
                    fantom_w3.eth.call(tx, block_identifier=receipt.get('blockNumber'))
                except ContractLogicError as e:
                    print(f"–ü—Ä–∏—á–∏–Ω–∞ –æ—à–∏–±–∫–∏: {str(e)}")
            return False
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏: {str(e)}")
        return False


def swap_usdc_fantom_to_arbitrum_usdt(account, amount):
    address = Web3.to_checksum_address(account.address)
    nonce = fantom_w3.eth.get_transaction_count(address)
    gas_price = fantom_w3.eth.gas_price

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ FTM –±–∞–ª–∞–Ω—Å–∞
    max_attempts = 10
    for attempt in range(max_attempts):
        ftm_balance = fantom_w3.eth.get_balance(address)
        print(f"üí∞ –ë–∞–ª–∞–Ω—Å FTM (–ø–æ–ø—ã—Ç–∫–∞ {attempt + 1}/{max_attempts}): {ftm_balance / 10**18:.6f} FTM")
        if ftm_balance > 0:
            break
        if attempt < max_attempts - 1:
            print("–û–∂–∏–¥–∞–µ–º –∑–∞—á–∏—Å–ª–µ–Ω–∏—è FTM... (10 —Å–µ–∫—É–Ω–¥)")
            time.sleep(10)
    if ftm_balance == 0:
        print("‚ùå –ë–∞–ª–∞–Ω—Å FTM —Ä–∞–≤–µ–Ω 0 –ø–æ—Å–ª–µ –≤—Å–µ—Ö –ø–æ–ø—ã—Ç–æ–∫. –ü–æ–ø–æ–ª–Ω–∏—Ç–µ –∫–æ—à–µ–ª–µ–∫.")
        return None

    # Stargate fee
    fees = stargate_fantom_contract.functions.quoteLayerZeroFee(
        ARBITRUM_LZ_CHAIN_ID, 1, "0x0000000000000000000000000000000000000001", "0x",
        [0, 0, "0x0000000000000000000000000000000000000001"]
    ).call()
    fee = fees[0]
    print(f"üí∏ –ö–æ–º–∏—Å—Å–∏—è Stargate (wei): {fee}")

    # Approve –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
    approve_gas = 0
    allowance = usdc_fantom_contract.functions.allowance(address, STARGATE_FANTOM_ADDRESS).call()
    print(f"üîê –¢–µ–∫—É—â–µ–µ —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–µ: {allowance / 10**6:.2f} lzUSDC")
    if allowance < amount:
        approve_txn = usdc_fantom_contract.functions.approve(STARGATE_FANTOM_ADDRESS, amount).build_transaction({
            'from': address,
            'gasPrice': gas_price,
            'nonce': nonce,
        })
        try:
            approve_gas = int(fantom_w3.eth.estimate_gas(approve_txn) * 1.2)
            approve_txn['gas'] = approve_gas
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ü–µ–Ω–∫–µ –≥–∞–∑–∞ –¥–ª—è approve: {str(e)}")
            return None

        required_ftm_for_approve = gas_price * approve_gas
        if ftm_balance < required_ftm_for_approve:
            print(f"‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ FTM –¥–ª—è approve")
            return None

        signed_approve_txn = fantom_w3.eth.account.sign_transaction(approve_txn, account.key)
        try:
            approve_txn_hash = fantom_w3.eth.send_raw_transaction(signed_approve_txn.raw_transaction)
            print(f"‚úÖ APPROVE: https://ftmscan.com/tx/{approve_txn_hash.hex()}")
            if not check_transaction_status(approve_txn_hash):
                print("‚ùå Approve –ø—Ä–æ–≤–∞–ª–∏–ª—Å—è")
                return None
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ approve: {str(e)}")
            return None
        nonce += 1
        time.sleep(10)

    # Swap
    balance_before_swap = usdc_fantom_contract.functions.balanceOf(address).call()
    if balance_before_swap < amount:
        print(f"‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ lzUSDC –¥–ª—è —Å–≤–∞–ø–∞: –Ω—É–∂–Ω–æ {amount / 10**6:.2f}, –µ—Å—Ç—å {balance_before_swap / 10**6:.2f}")
        return None

    swap_txn = stargate_fantom_contract.functions.swap(
        ARBITRUM_LZ_CHAIN_ID, SRC_POOL_ID, DST_POOL_ID, address, amount,
        amount - (amount * SLIPPAGE) // 1000,
        [0, 0, '0x0000000000000000000000000000000000000001'],
        address, '0x'
    ).build_transaction({
        'from': address,
        'value': fee,
        'gasPrice': gas_price,
        'nonce': nonce,
    })

    try:
        swap_gas = int(fantom_w3.eth.estimate_gas(swap_txn) * 1.2)
        swap_txn['gas'] = swap_gas
        print(f"‚õΩÔ∏è –ì–∞–∑ –Ω–∞ —Å–≤–∞–ø: {swap_gas}")
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ü–µ–Ω–∫–µ –≥–∞–∑–∞ –Ω–∞ —Å–≤–∞–ø: {str(e)}")
        return None

    required_ftm = fee + gas_price * (approve_gas + swap_gas)
    ftm_balance = fantom_w3.eth.get_balance(address)
    if ftm_balance < required_ftm:
        print(f"‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ FTM –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏")
        return None

    signed_swap_txn = fantom_w3.eth.account.sign_transaction(swap_txn, account.key)
    try:
        swap_txn_hash = fantom_w3.eth.send_raw_transaction(signed_swap_txn.raw_transaction)
        print(f"üöÄ –°–≤–∞–ø –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω: https://ftmscan.com/tx/{swap_txn_hash.hex()}")
        print(f"–°—Ç–∞—Ç—É—Å LayerZero: https://layerzeroscan.com/tx/{swap_txn_hash.hex()}")
        return swap_txn_hash
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–≤–∞–ø–∞: {str(e)}")
        return None


def swap_max_usdc_fantom_to_arbitrum(private_key):
    account = Account.from_key(private_key)
    wallet_address = account.address

    print(f"\n‚ñ∂Ô∏è –ö–æ—à–µ–ª–µ–∫: {wallet_address}")
    balance = get_balance_usdc_fantom(wallet_address)

    if balance == 0:
        print("‚ùå –ë–∞–ª–∞–Ω—Å lzUSDC —Ä–∞–≤–µ–Ω –Ω—É–ª—é, –ø—Ä–µ–∫—Ä–∞—â–∞–µ–º –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ.")
        return None

    print(f"üì§ –û—Ç–ø—Ä–∞–≤–∫–∞ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–≥–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞: {balance / 10**6:.2f} lzUSDC")
    print("üîÅ –ù–∞—á–∏–Ω–∞–µ–º —Å–≤–∞–ø lzUSDC (Fantom) -> USDT (Arbitrum)...")

    tx_hash = swap_usdc_fantom_to_arbitrum_usdt(account, balance)
    if tx_hash:
        print("‚è≥ –û–∂–∏–¥–∞–µ–º –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏...")
        time.sleep(20)
        check_transaction_status(tx_hash)
        return tx_hash
    return None


if __name__ == "__main__":
    PRIVATE_KEY = ''  # –í—Å—Ç–∞–≤—å —Å–≤–æ–π –ø—Ä–∏–≤–∞—Ç–Ω—ã–π –∫–ª—é—á
    tx_hash = swap_max_usdc_fantom_to_arbitrum(PRIVATE_KEY)
    if tx_hash:
        print(f"üéâ –£—Å–ø–µ—à–Ω–∞—è —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—è: {tx_hash.hex()}")
